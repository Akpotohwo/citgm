#!/usr/bin/env node
'use strict';
require('../lib/update'); // version update check
var citgm = require('../lib/citgm');
var out = require('../lib/out');
var app = require('commander');
var util = require('util');

var mod;
var test;
app
  .version('0.1.0')
  .arguments('<module> [test]')
  .action(function(m, t) {
    mod = m;
    test = t;
  })
  .option(
    '-v, --verbose', 'Verbose output')
  .option(
    '-k, --hmac <key>', 'HMAC Key for Script Verification')
  .option(
    '-l, --lookup [path]',
      'Use the lookup table. Optional [path] for alternate json file'
  )
  .option(
      '-d, --nodedir <path>',
      'Path to the node source to use when compiling native addons'
  )
  .option(
    '-n, --no-color', 'Turns off colorized output'
  )
  .option(
    '-s, --su', 'Allow running the tool as root.'
  );

if (process.platform !== 'win32') {
  app.option(
    '-u, --uid <uid>', 'Set the uid (posix only)'
  )
  .option(
    '-g, --gid <uid>', 'Set the gid (posix only)'
  );
}

app.parse(process.argv);

if (!mod) {
  app.outputHelp();
  return;
}

if (!app.su) {
  require('root-check')(); // silently downgrade if running as root...
                           // unless --su is passed
} else {
  out.warn('root', 'Running as root! Use caution!');
}

var options = {
  script: test,
  reporter: app.reporter,
  hmac: app.hmac,
  lookup: app.lookup,
  nodedir: app.nodedir
};
if (!citgm.windows) {
  var uidnumber = require('uid-number');
  var uid = app.uid || process.getuid();
  var gid = app.gid || process.getgid();
  uidnumber(uid,gid, function(err, uid, gid) {
    options.uid = uid;
    options.gid = gid;
    launch(mod, options);
  });
} else {
  launch(mod,options);
}

function launch(mod, options) {
  citgm.Tester(mod, options)
  .on('start', function(name, options) {
    out.info('starting', name);
  }).on('fail', function(err) {
    out.error('failure', err.message);
    process.exitCode = 1;
  }).on('info', function(key,message) {
    if (app.verbose)
      out.info(key, message);
  }).on('end', function(name) {
    out.info('done', name);
  }).run();
}
